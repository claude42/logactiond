diff --git a/src/logactiond.c b/src/logactiond.c
index d988540..d7b0c53 100644
--- a/src/logactiond.c
+++ b/src/logactiond.c
@@ -476,6 +476,13 @@ main(int argc, char *argv[])
                 die_hard("Error loading configuration");
         load_la_config();
 
+        start_watching_threads();
+#ifndef NOMONITORING
+        start_monitoring_thread();
+#endif /* NOMONITORING */
+        start_fifo_thread();
+        start_remote_thread();
+
         if (saved_state)
         {
                 if (!restore_state(saved_state, create_backup_file))
@@ -486,13 +493,6 @@ main(int argc, char *argv[])
                 start_save_state_thread(saved_state);
         }
 
-        start_watching_threads();
-#ifndef NOMONITORING
-        start_monitoring_thread();
-#endif /* NOMONITORING */
-        start_fifo_thread();
-        start_remote_thread();
-
         if (sync_on_startup)
         {
                 if (la_config->remote_enabled)
diff --git a/src/messages.c b/src/messages.c
index b003509..8994744 100644
--- a/src/messages.c
+++ b/src/messages.c
@@ -145,10 +145,14 @@ parse_add_entry_message(const char *const message, la_address_t *const address,
         if (!init_address(address, parsed_address_str))
                 LOG_RETURN(-1, LOG_ERR, "Cannot convert address in command %s!", message);
 
-        *rule = find_rule(parsed_rule_str);
-        if (!*rule)
-                LOG_RETURN_VERBOSE(-1, LOG_ERR, "Ignoring remote message \'%s\' "
-                                "- rule not active on local system", message);
+        xpthread_mutex_lock(&config_mutex);
+
+                *rule = find_rule(parsed_rule_str);
+                if (!*rule)
+                        LOG_RETURN_VERBOSE(-1, LOG_ERR, "Ignoring remote message \'%s\' "
+                                        "- rule not active on local system", message);
+
+        xpthread_mutex_unlock(&config_mutex);
 
         if (end_time)
                 *end_time = n >= 3 ? parsed_end_time : 0;
diff --git a/src/rules.c b/src/rules.c
index c385a5e..faaed7f 100644
--- a/src/rules.c
+++ b/src/rules.c
@@ -209,6 +209,8 @@ trigger_if_on_dnsbl(la_command_t *command, bool from_trigger_list)
                         trigger_command_from_blacklist(command);
                         if (command->end_string && command->duration > 0)
                                 enqueue_end_command(command, 0);
+                        else
+                                free_command(command);
                         triggered = true;
                 }
         }
diff --git a/src/state.c b/src/state.c
index 360e8a0..d99a211 100644
--- a/src/state.c
+++ b/src/state.c
@@ -120,43 +120,40 @@ restore_state(const char *const state_file_name, const bool create_backup_file)
                                         "file \"%s\"", state_file_name);
         }
 
-        la_log_verbose(LOG_INFO, "Restoring state from \"%s\"", state_file_name);
 
         size_t linebuffer_size = 0;
         char *linebuffer = NULL;
 
-        xpthread_mutex_lock(&config_mutex);
+        int line_no = 1;
+        ssize_t num_read;
+        int parse_result;
 
-                int line_no = 1;
-                ssize_t num_read;
-                int parse_result;
+        while ((num_read = getline(&linebuffer,
+                                        &linebuffer_size,stream)) != -1)
+        {
+                la_address_t address; la_rule_t *rule;
+                time_t end_time; int factor;
+
+                parse_result = parse_add_entry_message(linebuffer,
+                                &address, &rule, &end_time, &factor);
+                if (parse_result)
+                        la_vdebug("adr: %s, rule: %s, end_time: %lu, factor: %u",
+                                        address.text ? address.text : "no address",
+                                        rule ? rule->name : "no rule",
+                                        end_time, factor);
+                else
+                        la_vdebug("parse_add_entry_message()==0");
 
-                while ((num_read = getline(&linebuffer,
-                                                &linebuffer_size,stream)) != -1)
-                {
-                        la_address_t address; la_rule_t *rule;
-                        time_t end_time; int factor;
-
-                        parse_result = parse_add_entry_message(linebuffer,
-                                        &address, &rule, &end_time, &factor);
-                        if (parse_result)
-                                la_vdebug("adr: %s, rule: %s, end_time: %lu, factor: %u",
-                                                address.text ? address.text : "no address",
-                                                rule ? rule->name : "no rule",
-                                                end_time, factor);
-                        else
-                                la_vdebug("parse_add_entry_message()==0");
-
-                        if (parse_result == -1)
-                                break;
-                        else if (parse_result > 0)
-                                trigger_manual_commands_for_rule(&address, rule,
-                                                end_time, factor, NULL, true);
+                if (parse_result == -1)
+                        break;
+                else if (parse_result > 0)
+                        trigger_manual_commands_for_rule(&address, rule,
+                                        end_time, factor, NULL, true);
 
-                        line_no++;
-                }
+                line_no++;
+        }
 
-        xpthread_mutex_unlock(&config_mutex);
+        la_log_verbose(LOG_INFO, "Done restoring state from \"%s\"", state_file_name);
 
         free(linebuffer);
 
diff --git a/src/status.c b/src/status.c
index dea91d8..c809d82 100644
--- a/src/status.c
+++ b/src/status.c
@@ -216,7 +216,7 @@ dump_loop(void *const ptr)
 
                 dump_queue_status(false);
 
-                sleep(5);
+                sleep(1);
         }
 
         assert(false);
